[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
let mapleader = "\<Space>"
"" go runのキーマッピング  
au FileType go nmap <silent> <Leader>r <Plug>(go-run)
""" go testのキーマッピング  
au FileType go nmap <silent> <Leader>t <Plug>(go-test)
au FileType go nmap <silent> <Leader>s <Plug>(go-def-split)
au FileType go nmap <silent> <Leader>v <Plug>(go-def-vertical)
au FileType go nmap <silent> <leader>at :GoAddTags<CR>
au FileType go nmap <silent> <leader>fs :GoFillStruct<CR>
au FileType go nmap <silent> <leader>ei :GoIfErr<CR>
au FileType go nmap <silent> <leader>ki :GoKeyify<CR>
au FileType go nmap <silent> <leader>dd :GoDeclsDir<CR>
au FileType go nmap <silent> <leader>ip :GoImpl<CR>
"" highlight  
let g:go_hightlight_functions = 1  
let g:go_hightlight_methods = 1  
let g:go_hightlight_structs = 1  
let g:go_hightlight_interfaces = 1  
let g:go_hightlight_operators = 1  
let g:go_hightlight_build_constraints = 1  
"" GoFmt時にインポートするパッケージを整理(GoFmtはファイル書き込み時に自動的に実行される)  
let g:go_fmt_command = "goimports"  
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet'] " パワーがないマシンのときは構文チェックだけにする
let g:go_term_mode = 'split' " GoRun/GoTest画面分割方法
'''

[[plugins]]
repo = 'nsf/gocode'
on_ft = ['go']
hook_add = '''
'''

[[plugins]]
repo = 'scrooloose/syntastic'
on_ft = ['go']
hook_add = '''
let g:syntastic_mode_map = { 'mode': 'passive',
    \ 'active_filetypes': ['go'] }
    let g:syntastic_go_checkers = ['go', 'golint']
'''
